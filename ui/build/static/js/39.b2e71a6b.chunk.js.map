{"version":3,"sources":["views/pages/login/Login.js"],"names":["Login","props","state","handleChange","bind","event","target","name","value","this","setState","preventDefault","Consumer","context","className","md","show","error","onClose","undefined","color","size","closeButton","onClick","type","placeholder","JSON","stringify","autoComplete","username","onChange","password","xs","a","login","history","errorCode","ErrorStrings","push","console","log","React","Component"],"mappings":"kTAkBMA,E,kDAEJ,WAAaC,GAAS,IAAD,8BACnB,cAAOA,IACFC,MAAO,CAAC,SAAW,GAAI,SAAW,IACvC,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBAHD,E,yDAMPC,GACZ,GAAMA,EAAMC,OAAOC,KAAnB,CAGA,IAAML,EAAQ,GACdA,EAAMG,EAAMC,OAAOC,MAAMF,EAAMC,OAAOE,MACtCC,KAAKC,SAAUR,GACfG,EAAMM,oB,+BAGE,IAAD,OACP,OACE,kBAAC,IAAeC,SAAhB,MACG,SAACC,GAAD,OACC,yBAAKC,UAAU,sDACb,kBAAC,IAAD,KACE,kBAAC,KAAD,CAAMA,UAAU,0BACd,kBAAC,IAAD,CAAMC,GAAG,KACP,kBAAC,IAAD,CAAOD,UAAU,OACf,kBAAC,IAAD,KACE,kBAAC,KAAD,CACEE,OAAQ,EAAKd,MAAMe,MACnBC,QAAS,kBAAM,EAAKR,SAAS,CAACO,WAAOE,KACrCC,MAAM,SACNC,KAAK,MAEL,kBAAC,KAAD,CAAcC,aAAW,GACvB,kBAAC,KAAD,iCAEF,kBAAC,KAAD,KAAc,EAAKpB,MAAMe,OACzB,kBAAC,KAAD,KACE,kBAAC,IAAD,CAASG,MAAM,UAAUG,QAAS,kBAAM,EAAKb,SAAS,CAACO,WAAOE,MAA9D,QAGJ,kBAAC,IAAD,KACE,qCACA,uBAAGL,UAAU,cAAb,2BACA,kBAAC,IAAD,CAAaA,UAAU,QACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOP,KAAK,eAGhB,kBAAC,IAAD,CAAQiB,KAAK,OAAOjB,KAAK,WAAWkB,YAAaC,KAAKC,UAAUd,GAAUe,aAAa,WAAWpB,MAAO,EAAKN,MAAM2B,SAAUC,SAAU,EAAK3B,gBAE/I,kBAAC,IAAD,CAAaW,UAAU,QACrB,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOP,KAAK,sBAGhB,kBAAC,IAAD,CAAQiB,KAAK,WAAWjB,KAAK,WAAWkB,YAAY,WAAWG,aAAa,mBAAmBpB,MAAO,EAAKN,MAAM6B,SAAUD,SAAU,EAAK3B,gBAE5I,kBAAC,KAAD,KACE,kBAAC,IAAD,CAAM6B,GAAG,KACP,kBAAC,IAAD,CAASZ,MAAM,UAAUN,UAAU,OAAOS,QAAO,uCAAG,WAAOlB,GAAP,eAAA4B,EAAA,sEAC1BpB,EAAQqB,MAAO,EAAKhC,MAAM2B,SAAU,EAAK3B,MAAM6B,SAAU,EAAK9B,MAAMkC,SAD1C,QAC5CC,EAD4C,QAMhD,EAAK1B,SAAS,CAAEO,MAAOoB,IAAaD,MAHpC,EAAKnC,MAAMkC,QAAQG,KAAK,KACxBC,QAAQC,IAAK,YAJmC,2CAAH,uDAAjD,yB,GA/DRC,IAAMC,WA6FX1C","file":"static/js/39.b2e71a6b.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  CButton,\n  CCard,\n  CCardBody,\n  CCol,\n  CContainer,\n  CForm,\n  CInput,\n  CInputGroup,\n  CInputGroupPrepend,\n  CInputGroupText, CModal, CModalBody, CModalFooter, CModalHeader, CModalTitle,\n  CRow\n} from '@coreui/react'\nimport CIcon from '@coreui/icons-react'\nimport SessionContext from \"../../../sessionContext\";\nimport { ErrorStrings } from \"../../../errors\";\n\nclass Login extends React.Component {\n\n  constructor( props ) {\n    super( props );\n    this.state ={\"username\":\"\", \"password\":\"\"};\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange( event ) {\n    if ( !event.target.name ) {\n      return;\n    }\n    const state = {};\n    state[event.target.name]=event.target.value;\n    this.setState( state )\n    event.preventDefault();\n  }\n\n  render() {\n    return (\n      <SessionContext.Consumer>\n        {(context) => (\n          <div className=\"c-app c-default-layout flex-row align-items-center\">\n            <CContainer>\n              <CRow className=\"justify-content-center\">\n                <CCol md=\"8\">\n                  <CCard className=\"p-4\">\n                    <CCardBody>\n                      <CModal\n                        show={!!this.state.error}\n                        onClose={() => this.setState({error: undefined})}\n                        color=\"danger\"\n                        size=\"sm\"\n                      >\n                        <CModalHeader closeButton>\n                          <CModalTitle>Login or password wrong</CModalTitle>\n                        </CModalHeader>\n                        <CModalBody>{ this.state.error }</CModalBody>\n                        <CModalFooter>\n                          <CButton color=\"primary\" onClick={() => this.setState({error: undefined})}>Ok</CButton>\n                        </CModalFooter>\n                      </CModal>\n                      <CForm>\n                        <h1>Login</h1>\n                        <p className=\"text-muted\">Sign In to your account</p>\n                        <CInputGroup className=\"mb-3\">\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon name=\"cil-user\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <CInput type=\"text\" name=\"username\" placeholder={JSON.stringify(context)} autoComplete=\"username\" value={this.state.username} onChange={this.handleChange}/>\n                        </CInputGroup>\n                        <CInputGroup className=\"mb-4\">\n                          <CInputGroupPrepend>\n                            <CInputGroupText>\n                              <CIcon name=\"cil-lock-locked\" />\n                            </CInputGroupText>\n                          </CInputGroupPrepend>\n                          <CInput type=\"password\" name=\"password\" placeholder=\"Password\" autoComplete=\"current-password\" value={this.state.password} onChange={this.handleChange}/>\n                        </CInputGroup>\n                        <CRow>\n                          <CCol xs=\"6\">\n                            <CButton color=\"primary\" className=\"px-4\" onClick={ async (event)=>{\n                              const errorCode = await context.login( this.state.username, this.state.password, this.props.history );\n                              if ( !errorCode ) {\n                                this.props.history.push(\"/\");\n                                console.log( \"success\");\n                              } else {\n                                this.setState({ error: ErrorStrings[errorCode] })\n                              }\n                            } }>Login</CButton>\n                          </CCol>\n                          {/*\n                          <CCol xs=\"6\" className=\"text-right\">\n                            <CButton color=\"link\" className=\"px-0\">Forgot password?</CButton>\n                          </CCol>\n                          */}\n                        </CRow>\n                      </CForm>\n                    </CCardBody>\n                  </CCard>\n                </CCol>\n              </CRow>\n            </CContainer>\n          </div>\n        )}\n      </SessionContext.Consumer>\n\n    )\n  }\n}\n\nexport default Login;\n"],"sourceRoot":""}