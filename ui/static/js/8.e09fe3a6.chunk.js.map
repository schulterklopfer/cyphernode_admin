{"version":3,"sources":["../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","views/apps/AppDetails.js","views/apps/Apps.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","AppDetails","appData","xl","name","hash","className","mountPoint","description","striped","items","availableRoles","fields","size","accessPolicies","Apps","useState","data","appList","setAppList","useEffect","ignore","a","requests","getApps","response","status","body","fetchAppList","map","key","id"],"mappings":"2NAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,gHImCvFC,EAhCI,SAACC,GAClB,OACE,kBAAC,IAAD,CAAMC,GAAI,GACV,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,qBADd,IACsCF,EAAQE,KAD9C,MACuD,8BAAOF,EAAQG,MACpE,yBAAKC,UAAU,eAAgB,IAAIJ,EAAQK,aAE7C,kBAAC,IAAD,OACML,EAAQM,aAAgB,yBAAKF,UAAU,mBAAkB,4BAAMJ,EAAQM,cAE3E,+CACA,kBAAC,IAAD,CACEC,SAAS,EACTC,MAAOR,EAAQS,eACfC,OAAQ,CAAC,OAAO,cAAc,cAC9BC,KAAK,OAGP,+CACA,kBAAC,IAAD,CACEJ,SAAS,EACTC,MAAOR,EAAQY,eACfF,OAAQ,CAAC,QAAQ,YAAY,SAAS,WACtCC,KAAK,W,SC+BAE,UAtDF,WAAO,IAAD,EACaC,mBAAS,CAAEC,KAAM,KAD9B,mBACVC,EADU,KACDC,EADC,KAmBjB,OAhBAC,qBAAW,WACT,IAAIC,GAAS,EADE,4CAEf,4BAAAC,EAAA,sEACyBC,IAASC,UADlC,OAE2B,OADnBC,EADR,QAEgBC,SAENL,GACJF,EAAWM,EAASE,OAL1B,4CAFe,sBAaf,OAbe,mCAYfC,GACO,WAAQP,GAAS,KACvB,IAGD,oCACA,kBAAC,KAAD,KAAM,kBAAC,IAAD,KACJ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,yBAAKf,UAAU,QAAf,0DACuD,qCADvD,qLAMA,yBAAKA,UAAU,QACb,+CADF,wIAG+C,uCAH/C,iDAIkB,uCAJlB,iDAKM,4CALN,sNASA,yBAAKA,UAAU,QACb,+CADF,uQAUN,kBAAC,KAAD,SAASY,EAAQD,KAAKY,KAAI,SAAC3B,GAAD,OAAe,kBAAC,EAAD,eAAY4B,IAAK5B,EAAQ6B,IAAQ7B,OAA1E","file":"static/js/8.e09fe3a6.chunk.js","sourcesContent":["import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import React from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CCardHeader, CCol, CDataTable,\n} from '@coreui/react'\nimport {CIcon} from \"@coreui/icons-react\";\n\nconst AppDetails = (appData) => {\n  return (\n    <CCol xl={6}>\n    <CCard>\n      <CCardHeader>\n        <CIcon name=\"cil-applications\" /> { appData.name } - <code>{appData.hash}</code>\n        <div className=\"float-right\">{ '/'+appData.mountPoint }</div>\n      </CCardHeader>\n      <CCardBody>\n        { !!appData.description  && <div className=\"mb-3 mt-mi lead\"><em>{ appData.description}</em></div> }\n\n        <h5>Available Roles</h5>\n        <CDataTable\n          striped={true}\n          items={appData.availableRoles}\n          fields={['name','description','autoAssign']}\n          size=\"sm\"\n        />\n\n        <h5>Access Policies</h5>\n        <CDataTable\n          striped={true}\n          items={appData.accessPolicies}\n          fields={['roles','resources','effect','actions']}\n          size=\"sm\"\n        />\n      </CCardBody>\n    </CCard>\n    </CCol>\n  )\n}\n\nexport default AppDetails\n","import React, { useState, useEffect } from 'react'\nimport {\n  CCard,\n  CCardBody,\n  CRow, CCol\n} from '@coreui/react'\nimport AppDetails from \"./AppDetails\";\nimport requests from \"../../requests\";\n\nconst Apps = () => {\n  const [appList, setAppList] = useState({ data: [] })\n\n  useEffect( () => {\n    let ignore = false;\n    async function fetchAppList() {\n      const response = await requests.getApps();\n      if ( response.status === 200 ) {\n        // everything is ok\n        if ( !ignore ) {\n          setAppList(response.body);\n        }\n      }\n    }\n\n    fetchAppList();\n    return () => { ignore = true }\n  }, [] )\n\n  return (\n    <>\n    <CRow><CCol>\n      <CCard>\n        <CCardBody>\n          <div className=\"mb-3\">\n          The following cypherapps have been installed using the <code>cam</code> tool. They\n          cannot (yet) be edited using the cyphernode admin. It's just a quick overview\n          of all the roles a cypherapp provides and how access to different resources\n          is handled.\n          </div>\n          <div className=\"mb-3\">\n            <h5>Available Roles</h5>\n            The available roles describe the roles present in the respective cypherapp. Please note\n            that all roles are local and for example the <code>admin</code> role in one cypherapp is not\n            the same as the <code>admin</code> role in another cypherapp. If a role has\n            the <code>autoAssign</code> flag set, it means that every user will automatically receive\n            that role. This is useful, when you want to install a new cypherapp and give the existing\n            users access to the regular user space of that cypherapp.\n          </div>\n          <div className=\"mb-3\">\n            <h5>Access Policies</h5>\n            Access policies allow or deny access of certain roles within the cypherapp\n            to a certain resource relative to the mount point of the cypherapp. All\n            resources are described using regular expressions. The actions are equivalent\n            to the available HTTP methods.\n          </div>\n        </CCardBody>\n      </CCard>\n    </CCol></CRow>\n    <CRow> { appList.data.map((appData) => ( <AppDetails key={appData.id} {...appData} /> ) ) } </CRow>\n    </>\n  )\n}\n\nexport default Apps\n"],"sourceRoot":""}